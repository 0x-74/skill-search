import os
import pandas as pd
import streamlit as st
from visualizations import show_final_analysis_results
from job_parser import reset_parsing_state


def show_visualization_page():
    st.subheader("üìä Advanced Analytics and Visualizations")
    st.write("Visualize your parsed data in the most stunning way possible")
    reset_parsing_state()
    st.markdown("---")
    st.subheader("üîç Select parsed data file")
    tab1, tab2 = st.tabs(["üì§ Upload File", "üìÇ Select Local File"])
    
    # --- Upload File ---
    with tab1:
        uploaded_file = st.file_uploader(
            "Upload job listings file",
            type=['csv'],  # Fixed to csv
            help="Upload the .csv file generated by the scraper",
            key="analytics_file_uploader"
        )
        
        if uploaded_file:
            # Save uploaded file temporarily
            temp_path = f"temp_{uploaded_file.name}"
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getvalue())
            st.session_state.selected_file_path = temp_path
            st.success(f"‚úÖ File uploaded: {uploaded_file.name}")

    # --- Select Local File ---
    with tab2:
        csv_files = [f for f in os.listdir('.') if f.endswith('.csv')]
        
        if csv_files:
            selected_file = st.selectbox(
                "Select a job file",
                options=csv_files,
                help="Choose from locally available job files"
            )
            
            if selected_file:
                st.session_state.selected_file_path = selected_file
                
                # Show file preview
                with open(selected_file, 'r', encoding='utf-8') as f:
                    preview = f.read()[:1000]
                
                st.text_area("File Preview", preview + "...", height=150, disabled=True)
                st.info(f"üìä File size: {len(preview)} characters (showing first 1000)")
        else:
            st.info("No .csv files found in the current directory")

    # --- Visualize ---
    if st.button("visualize"):
        if "selected_file_path" in st.session_state:
            # Read the CSV and store as list of dicts
            df = pd.read_csv(st.session_state.selected_file_path)
            st.session_state.parsing_state['parsed_jobs'] = df.to_dict(orient="records")
            show_final_analysis_results()
        else:
            st.warning("Please upload or select a CSV file before visualizing.")
